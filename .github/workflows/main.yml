# Nome do workflow (aparece na aba Actions)
name: 🚀 Deploy ContainerView

# Quando executar o workflow
on:
  # Executar quando fizer push na branch main
  push:
    branches: [ main ]
  
  # Permitir execução manual
  workflow_dispatch:

# Variáveis globais
env:
  AWS_REGION: us-east-1

# Jobs (trabalhos) do workflow
jobs:
  # Job 1: Testar a aplicação
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    
    steps:
    # Passo 1: Baixar código do repositório
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    # Passo 2: Instalar Java 17
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven

    # Passo 3: Executar testes
    - name: 🧪 Run tests
      run: |
        cd back-end
        chmod +x mvnw
        ./mvnw clean test

  # Job 2: Build e Deploy (só executa se testes passarem)
  deploy:
    name: 🚀 Build and Deploy
    runs-on: ubuntu-latest
    needs: test  # Espera job 'test' terminar com sucesso
    if: github.ref == 'refs/heads/main'  # Só na branch main
    
    steps:
    # Passo 1: Baixar código
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    # Passo 2: Instalar Java
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven

    # Passo 3: Build da aplicação
    - name: 🏗️ Build application
      run: |
        cd back-end
        chmod +x mvnw
        ./mvnw clean package -DskipTests
        
        # Verificar se JAR foi criado
        ls -la target/
        echo "✅ Build completed successfully!"

    # Passo 4: Configurar AWS
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Passo 5: Preparar pacote de deploy
    - name: 📦 Prepare deployment package
      run: |
        cd back-end
        
        # Criar pasta de deploy
        mkdir -p deploy
        
        # Copiar JAR renomeando para application.jar
        cp target/containerView-*.jar deploy/application.jar
        
        # Criar Procfile (obrigatório para EB)
        echo "web: java -jar application.jar" > deploy/Procfile
        
        # Criar .ebextensions para configurações
        mkdir -p deploy/.ebextensions
        cat > deploy/.ebextensions/java.config << 'EOF'
        option_settings:
          aws:elasticbeanstalk:container:java:
            JVMOptions: '-Xmx512m'
          aws:elasticbeanstalk:application:environment:
            SPRING_PROFILES_ACTIVE: production
            SERVER_PORT: 5000
        EOF
        
        # Verificar conteúdo
        ls -la deploy/
        echo "📦 Deployment package ready!"

    # Passo 6: Deploy para Elastic Beanstalk
    - name: 🚀 Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ContainerView
        environment_name: ContainerView-prod
        version_label: v${{ github.run_number }}
        region: ${{ env.AWS_REGION }}
        deployment_package: back-end/deploy/
        wait_for_deployment: true
        wait_for_environment_recovery: 300

    # Passo 7: Verificar deploy
    - name: ✅ Deployment success
      if: success()
      run: |
        echo "🎉 Deployment successful!"
        echo "🌍 Application URL: http://ContainerView-prod.us-east-1.elasticbeanstalk.com"
        echo "🏥 Health Check: http://ContainerView-prod.us-east-1.elasticbeanstalk.com/actuator/health"

    # Passo 8: Se falhar
    - name: ❌ Deployment failed
      if: failure()
      run: |
        echo "💥 Deployment failed!"
        echo "📋 Check AWS Elastic Beanstalk console for details"
