name: üöÄ Deploy ContainerView to Elastic Beanstalk

on:
  push:
    branches: [ main ]
    paths:
      - 'back-end/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'back-end/**'

  # Permite execu√ß√£o manual
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'ContainerView-prod'
        type: choice
        options:
          - ContainerView-prod
          - ContainerView-staging

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  APPLICATION_NAME: ${{ secrets.EB_APPLICATION_NAME }}
  ENVIRONMENT_NAME: ${{ inputs.environment || secrets.EB_ENVIRONMENT_NAME }}

jobs:
  # ================================================================================================
  # JOB 1: BUILD E TESTES
  # ================================================================================================
  build:
    name: üî® Build & Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.version.outputs.artifact-name }}

    steps:
      - name: üìÅ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚òï Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven

      - name: üè∑Ô∏è Generate version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            VERSION="pr-${{ github.event.number }}-$(echo ${{ github.sha }} | cut -c1-8)"
          else
            VERSION="v$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-8)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "artifact-name=containerView-$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: üß™ Run tests
        working-directory: ./back-end
        run: |
          ./mvnw test --batch-mode --fail-at-end

      - name: üìä Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: üìã Test Results
          path: back-end/target/surefire-reports/*.xml
          reporter: java-junit

      - name: üî® Build JAR
        working-directory: ./back-end
        run: |
          ./mvnw clean package -DskipTests -Peb --batch-mode
          
          # Verificar se JAR foi gerado
          if [ ! -f target/containerView.jar ]; then
            echo "‚ùå JAR file not found!"
            exit 1
          fi
          
          # Mostrar informa√ß√µes do JAR
          ls -la target/containerView.jar
          echo "‚úÖ JAR built successfully"

      - name: üì¶ Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.artifact-name }}
          path: back-end/target/containerView.jar
          retention-days: 30

  # ================================================================================================
  # JOB 2: DEPLOY TO ELASTIC BEANSTALK
  # ================================================================================================
  deploy:
    name: üöÄ Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    # S√≥ fazer deploy se for push para main (n√£o PR)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: ${{ steps.deploy.outputs.environment-url }}

    steps:
      - name: üìÅ Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ./

      - name: üîß Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üè∑Ô∏è Create deployment package
        run: |
          # Renomear JAR para deployment
          mv containerView.jar application.jar
          
          # Criar diret√≥rio de deployment
          mkdir -p deployment
          mv application.jar deployment/
          
          # Verificar estrutura
          ls -la deployment/

      - name: üöÄ Deploy to Elastic Beanstalk
        id: deploy
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.APPLICATION_NAME }}
          environment_name: ${{ env.ENVIRONMENT_NAME }}
          version_label: ${{ needs.build.outputs.version }}
          region: ${{ env.AWS_REGION }}
          deployment_package: deployment/application.jar
          wait_for_environment_recovery: 300
          wait_for_deployment: true
          use_existing_version_if_available: false

      - name: üîç Verify deployment
        run: |
          # Obter URL do environment
          ENV_URL=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.APPLICATION_NAME }} \
            --environment-names ${{ env.ENVIRONMENT_NAME }} \
            --query 'Environments[0].CNAME' \
            --output text)
          
          echo "Environment URL: http://$ENV_URL"
          
          # Testar health check
          echo "Testing health endpoint..."
          for i in {1..10}; do
            if curl -f -s "http://$ENV_URL/actuator/health" > /dev/null; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚è≥ Waiting for application to start... (attempt $i/10)"
              sleep 30
            fi
          done

      - name: üìä Deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: ${{ env.APPLICATION_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
          
          ENV_URL=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.APPLICATION_NAME }} \
            --environment-names ${{ env.ENVIRONMENT_NAME }} \
            --query 'Environments[0].CNAME' \
            --output text)
          
          echo "- [Application URL](http://$ENV_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- [Health Check](http://$ENV_URL/actuator/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [AWS Console](https://console.aws.amazon.com/elasticbeanstalk/home?region=${{ env.AWS_REGION }}#/environment/dashboard?applicationName=${{ env.APPLICATION_NAME }}&environmentId=${{ env.ENVIRONMENT_NAME }})" >> $GITHUB_STEP_SUMMARY

  # ================================================================================================
  # JOB 3: NOTIFICA√á√ÉO (OPCIONAL)
  # ================================================================================================
  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()

    steps:
      - name: üìß Send notification
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Environment: ${{ env.ENVIRONMENT_NAME }}"
          
          # Aqui voc√™ pode adicionar integra√ß√£o com Slack, Discord, etc.
          # Exemplo para Slack (se configurar webhook):
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"‚úÖ ContainerView deployed successfully!\nVersion: ${{ needs.build.outputs.version }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ‚ùå Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for more information."